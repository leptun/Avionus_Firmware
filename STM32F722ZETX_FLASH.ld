/*
******************************************************************************
**
** @file        : LinkerScript.ld
**
** @author      : Auto-generated by STM32CubeIDE
**
** @brief       : Linker script for STM32F722ZETx Device from STM32F7 series
**                      512KBytes FLASH
**                      256KBytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed as is, without any warranty
**                of any kind.
**
******************************************************************************
** @attention
**
** Copyright (c) 2023 STMicroelectronics.
** All rights reserved.
**
** This software is licensed under terms that can be found in the LICENSE file
** in the root directory of this software component.
** If no LICENSE file comes with this software, it is provided AS-IS.
**
******************************************************************************
*/

/* Entry Point */
ENTRY(Reset_Handler)

_Min_Heap_Size = 0x200; /* required amount of heap */
_Min_Stack_Size = 0x400; /* required amount of stack */

/* Memories definition */
MEMORY
{
	ITCMRAM (rw) : ORIGIN = 0x00000000, LENGTH = 16K
	DTCMRAM (rw) : ORIGIN = 0x20000000, LENGTH = 64K
	SRAM1 (rw) : ORIGIN = 0x20010000, LENGTH = 176K
	SRAM2 (rw) : ORIGIN = 0x2003C000, LENGTH = 16K
	FLASH (rx) : ORIGIN = 0x00200000, LENGTH = 512K
}

__privileged_functions_region_size__  = 64K;
/* __privileged_data_region_size__       = 32K; */
__tinyusb_data_region_size__          = 2K;

__FLASH_segment_start__               = ORIGIN( FLASH );
__FLASH_segment_end__                 = __FLASH_segment_start__ + LENGTH( FLASH );

__privileged_functions_start__        = __FLASH_segment_start__;
__privileged_functions_end__          = __FLASH_segment_start__ + __privileged_functions_region_size__;

__SHARED_SRAM_segment_start__         = ORIGIN( ITCMRAM );
__SHARED_SRAM_segment_end__           = __SHARED_SRAM_segment_start__ + LENGTH( ITCMRAM );

/*
__SRAM_segment_start__                = ORIGIN( DTCMRAM );
__SRAM_segment_end__                  = __SRAM_segment_start__ + LENGTH( DTCMRAM ) + LENGTH( SRAM1 ) + LENGTH( SRAM2 );
*/

/*
__privileged_data_start__             = ORIGIN ( DTCMRAM );
__privileged_data_end__               = __SRAM_segment_start__ + __privileged_data_region_size__;
*/


/* Sections */
SECTIONS
{
    /* The startup code and FreeRTOS kernel code are placed into privileged
     * flash. */
    .privileged_functions :
    {
        . = ALIGN(4);
        KEEP(*(.isr_vector)) /* Startup code */
        . = ALIGN(4);
        *(privileged_functions)
        . = ALIGN(4);
        FILL(0xADDE);
        /* Ensure that un-privileged code is placed after the region reserved
         * for privileged kernel code. */
        /* Note that dot (.) actually refers to the byte offset from the start
         * of the current section (.privileged_functions in this case). As a
         * result, setting dot (.) to a value sets the size of the section. */
        . = __privileged_functions_region_size__;
    } >FLASH

  /* The program code and other data into "FLASH" Rom type memory */
  .text :
  {
    /* Place the FreeRTOS System Calls first in the unprivileged region. */
    . = ALIGN(4);
    __syscalls_flash_start__ = .;
    *(freertos_system_calls)
    __syscalls_flash_end__ = .;
    . = ALIGN(4);
    *(.text)           /* .text sections (code) */
    *(.text*)          /* .text* sections (code) */
    *(.glue_7)         /* glue arm to thumb code */
    *(.glue_7t)        /* glue thumb to arm code */
    *(.eh_frame)

    KEEP (*(.init))
    KEEP (*(.fini))

    . = ALIGN(4);
    _etext = .;        /* define a global symbols at end of code */
  } >FLASH

  /* Constant data into "FLASH" Rom type memory */
  .rodata :
  {
    . = ALIGN(4);
    *(.rodata)         /* .rodata sections (constants, strings, etc.) */
    *(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    *(.force_rodata .force_rodata*)
    . = ALIGN(4);
  } >FLASH

  .ARM.extab   : {
    . = ALIGN(4);
    *(.ARM.extab* .gnu.linkonce.armextab.*)
    . = ALIGN(4);
  } >FLASH

  .ARM : {
    . = ALIGN(4);
    __exidx_start = .;
    *(.ARM.exidx*)
    __exidx_end = .;
    . = ALIGN(4);
  } >FLASH

  .preinit_array     :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
    . = ALIGN(4);
  } >FLASH

  .init_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
    . = ALIGN(4);
  } >FLASH

  .fini_array :
  {
    . = ALIGN(4);
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
    . = ALIGN(4);
  } >FLASH

/* -------------------------------------------------------------------------- */

	.MSP_stack :
	{
		. = ALIGN(8);
		. = . + _Min_Stack_Size;
		. = ALIGN(8);
		_estack = .;
	} >DTCMRAM

/* -------------------------------------------------------------------------- */

	.freertos_data :
	{
		. = ALIGN(4);
		_freertos_data_run_addr = .;
		
		./Kernel/*.o(.data*) /* */
		./FreeRTOS-Kernel/*.o(.data*) /* */
		
		. = ALIGN(4);
		_freertos_data_end = .;
	} >DTCMRAM AT> FLASH
	_freertos_data_load_addr = LOADADDR(.freertos_data);

	.freertos_bss (NOLOAD) :
	{
		. = ALIGN(4);
		_freertos_bss_run_addr = .;
		
		./Kernel/*.o(.bss*) /* */
		./FreeRTOS-Kernel/*.o(.bss*) /* */
		*(.stack)
		
		. = ALIGN(4);
		_freertos_bss_end = .;
	} >DTCMRAM

/* -------------------------------------------------------------------------- */

	.tinyusb_data :
	{
		. = ALIGN(4);
		_tinyusb_data_run_addr = .;
		
		./tinyusb/src/*.o(.data*) /* */
		./usb/*.o(.data*) /* */
		./App/modules/usb.o(.data*)
		
		. = ALIGN(4);
		_tinyusb_data_end = .;
	} >SRAM2 AT> FLASH
	_tinyusb_data_load_addr = LOADADDR(.tinyusb_data);

	.tinyusb_bss (NOLOAD) :
	{
		. = ALIGN(4);
		_tinyusb_bss_run_addr = .;
		
		./tinyusb/src/*.o(.bss*) /* */
		./usb/*.o(.bss*) /* */
		./App/modules/usb.o(.bss*)
		
		. = ALIGN(4);
		. = __tinyusb_data_region_size__ - (_tinyusb_data_end - _tinyusb_data_run_addr);
		_tinyusb_bss_end = .;
	} >SRAM2

/* -------------------------------------------------------------------------- */

	.app_data :
	{
		. = ALIGN(4);
		_app_data_run_addr = .;
		
		./App/*.o(.data*) /* */
		
		. = ALIGN(4);
		_app_data_end = .;
	} >SRAM1 AT> FLASH
	_app_data_load_addr = LOADADDR(.app_data);

	.app_bss (NOLOAD) :
	{
		. = ALIGN(4);
		_app_bss_run_addr = .;
		
		./App/*.o(.bss*) /* */
		
		. = ALIGN(4);
		_app_bss_end = .;
	} >SRAM1

/* -------------------------------------------------------------------------- */

	.shared_data :
	{
		. = ALIGN(4);
		_shared_data_run_addr = .;
		
		./Core/*.o(.data*) /* */
		./Drivers/*.o(.data*) /* */
	    *(.data)           /* .data sections */
    	*(.data*)          /* .data* sections */
    	/*    *(.RamFunc)        /* .RamFunc sections */
		/*    *(.RamFunc*)       /* .RamFunc* sections */
		
		. = ALIGN(4);
		_shared_data_end = .;
	} >ITCMRAM AT> FLASH
	_shared_data_load_addr = LOADADDR(.shared_data);

	.shared_bss (NOLOAD) :
	{
		. = ALIGN(4);
		_shared_bss_run_addr = .;
		
		./Core/*.o(.bss*) /* */
		./Drivers/*.o(.bss*) /* */
	    *(.bss)
	    *(.bss*)
	    *(COMMON)
		
		. = ALIGN(4);
		_shared_bss_end = .;
	} >ITCMRAM

/* -------------------------------------------------------------------------- */

	._user_heap :
	{
		. = ALIGN(4);
		PROVIDE ( end = . );
		PROVIDE ( _end = . );
		. = . + _Min_Heap_Size;
		. = ALIGN(4);
		_eheap = .;
	} >ITCMRAM

/* -------------------------------------------------------------------------- */

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
